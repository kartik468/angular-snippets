{
    "Angular reactive form validator function": {
      "prefix": "ang-reactive-form-validator",
      "body": [
        "import { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';",
        "",
        "export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {",
        "  return (control: AbstractControl): {[key: string]: any} | null => {",
        "    const forbidden = nameRe.test(control.value);",
        "    return forbidden ? {'forbiddenName': {value: control.value}} : null;",
        "  };",
        "}",
        ""
      ],
      "description": "reactive form validator function"
    },
    "Angular validator function to reactive form": {
      "prefix": "ang-add-validator-function-to-reactive-form",
      "body": [
        "// Adding to reactive forms",
        "this.heroForm = new FormGroup({",
        "  name: new FormControl(this.hero.name, [",
        "    Validators.required,",
        "    Validators.minLength(4),",
        "    forbiddenNameValidator(/bob/i) // <-- Here's how you pass in the custom validator.",
        "  ]),",
        "  alterEgo: new FormControl(this.hero.alterEgo),",
        "  power: new FormControl(this.hero.power, Validators.required)",
        "});",
        ""
      ],
      "description": "add validator function to reactive form"
    },
    "Angular validator function to template driven form": {
      "prefix": "ang-add-validator-function-to-template-driven-form",
      "body": [
        "// Adding to template driven form",
        "@Directive({",
        "  selector: '[appForbiddenName]',",
        "  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]",
        "})",
        "export class ForbiddenValidatorDirective implements Validator {",
        "  @Input('appForbiddenName') forbiddenName: string;",
        "",
        "  validate(control: AbstractControl): {[key: string]: any} | null {",
        "    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)",
        "                              : null;",
        "  }",
        "}"
      ],
      "description": "add validator function to template driven form"
    },
    "Angular form builder": {
      "prefix": "ang-add-form-builder",
      "body": [
        "import { FormArray, FormBuilder, Validators } from '@angular/forms';",
        "",
        "profileForm = this.fb.group({",
        "    firstName: ['kar', { updateOn: 'blur' }, [Validators.minLength(3), Validators.required]],",
        "    lastName: [''],",
        "    address: this.fb.group({",
        "        street: [''],",
        "        city: [''],",
        "        state: [''],",
        "        zip: ['']",
        "    }),",
        "    aliases: this.fb.array([",
        "        this.fb.control('')",
        "    ])",
        "});",
        "",
        "get aliases() {",
        "    return this.profileForm.get('aliases') as FormArray;",
        "}",
        "",
        "addAlias() {",
        "    this.aliases.push(this.fb.control(''));",
        "}"
      ],
      "description": "add form builder"
    },

    "Angular Component With NG_VALUE_ACCESSOR": {
      "prefix": "ang-component-value-accessor",
      "description": "Angular Component With NG_VALUE_ACCESSOR",
      "body": [
        "import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';",
        "import { Component, Input, OnInit, forwardRef } from '@angular/core';",
        "",
        "export const ${1:COMPONENT_NAME}_VALUE_ACCESSOR: any = {",
        "\tprovide: NG_VALUE_ACCESSOR,",
        "\tuseExisting: forwardRef(() => ${2:ComponentName}Component),",
        "\tmulti: true",
        "};",
        "",
        "@Component({",
        "\tselector: '${3:selector-name}',",
        "\ttemplateUrl: './${4:name}.component.html',",
        "\tstyleUrls: ['./${4:name}.component.css'],",
        "\tproviders: [${1:COMPONENT_NAME}_VALUE_ACCESSOR]",
        "})",
        "export class ${2:ComponentName}Component implements OnInit, ControlValueAccessor {",
        "",
        "\tprivate _value: any;",
        "",
        "\tset value(value: any) {",
        "\t\tthis._value = value;",
        "\t\tthis.notifyValueChange();",
        "\t}",
        "",
        "\tget value(): any {",
        "\t\treturn this._value;",
        "\t}",
        "",
        "\tonChange: (value) => {};",
        "\tonTouched: () => {};",
        "",
        "\tconstructor() { }",
        "",
        "\tnotifyValueChange(): void {",
        "\t\tif (this.onChange) {",
        "\t\t\tthis.onChange(this.value);",
        "\t\t}",
        "\t}",
        "",
        "\tngOnInit(): void {",
        "\t\t",
        "\t}",
        "",
        "\twriteValue(obj: any): void {",
        "\t\tthis._value = obj;",
        "\t}",
        "",
        "\tregisterOnChange(fn: any): void {",
        "\t\tthis.onChange = fn;",
        "\t}",
        "",
        "\tregisterOnTouched(fn: any): void {",
        "\t\tthis.onTouched = fn;",
        "\t}",
        "",
        "\tsetDisabledState(isDisabled: boolean): void {",
        "\t}",
        "}",
        "$0"
      ]
    },

    "Angular attribute directive": {
      "prefix": "ang-attribute-directive",
      "body": [
        "import { Directive, ElementRef, HostListener, Input } from '@angular/core';",
        "",
        "@Directive({",
        "  selector: '[appHighlight]'",
        "})",
        "export class HighlightDirective {",
        "  constructor(private el: ElementRef) {}",
        "",
        "  @Input() defaultColor: string;",
        "",
        "  @Input('appHighlight') highlightColor: string;",
        "",
        "  @HostListener('mouseenter') onMouseEnter() {",
        "    this.highlight(this.highlightColor || this.defaultColor || 'red');",
        "  }",
        "",
        "  @HostListener('mouseleave') onMouseLeave() {",
        "    this.highlight(null);",
        "  }",
        "",
        "  private highlight(color: string) {",
        "    this.el.nativeElement.style.backgroundColor = color;",
        "  }",
        "}",
        "/*",
        "<p [appHighlight]=\"color\">Highlight me!</p>",
        "",
        "<p [appHighlight]=\"color\" defaultColor=\"violet\">",
        "  Highlight me too!",
        "</p>",
        "*/",
        ""
      ],
      "description": "Angular attribute directive"
    },
    "Angular structural directive": {
      "prefix": "ang-structural-directive",
      "body": [
        "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';",
        "",
        "/**",
        " * Add the template content to the DOM unless the condition is true.",
        " *",
        " * If the expression assigned to `appUnless` evaluates to a truthy value",
        " * then the templated elements are removed removed from the DOM,",
        " * the templated elements are (re)inserted into the DOM.",
        " *",
        " * <div *appUnless=\"errorCount\" class=\"success\">",
        " *   Congrats! Everything is great!",
        " * </div>",
        " *",
        " * ### Syntax",
        " *",
        " * - `<div *appUnless=\"condition\">...</div>`",
        " * - `<ng-template [appUnless]=\"condition\"><div>...</div></ng-template>`",
        " *",
        " */",
        "@Directive({ selector: '[appUnless]'})",
        "export class UnlessDirective {",
        "  private hasView = false;",
        "",
        "  constructor(",
        "    private templateRef: TemplateRef<any>,",
        "    private viewContainer: ViewContainerRef) { }",
        "",
        "  @Input() set appUnless(condition: boolean) {",
        "    if (!condition && !this.hasView) {",
        "      this.viewContainer.createEmbeddedView(this.templateRef);",
        "      this.hasView = true;",
        "    } else if (condition && this.hasView) {",
        "      this.viewContainer.clear();",
        "      this.hasView = false;",
        "    }",
        "  }",
        "}"
      ],
      "description": "Angular structural directive"
    },

    "Angular http interceptor add auth header": {
      "prefix": "ang-http-interceptor-auth-header",
      "body": [
        "import { Injectable } from '@angular/core';",
        "import {",
        "  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest",
        "} from '@angular/common/http';",
        "",
        "import { Observable } from 'rxjs';",
        "",
        "/** Pass untouched request through to the next request handler. */",
        "@Injectable()",
        "export class AuthInterceptor implements HttpInterceptor {",
        "",
        "    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
        "        // Get the auth token from the service.",
        "        const authToken = '';",
        "",
        "        // Clone the request and replace the original headers with",
        "        // cloned headers, updated with the authorization.",
        "        const authReq = req.clone({",
        "          headers: req.headers.set('Authorization', authToken)",
        "        });",
        "",
        "        // send cloned request with header to the next handler.",
        "        return next.handle(authReq);",
        "      }",
        "}",
        ""
      ],
      "description": "Angular http interceptor add auth header"
    },
    "Angular http interceptor add logging": {
      "prefix": "ang-http-interceptor-logging",
      "body": [
        "import { Injectable } from '@angular/core';",
        "import {",
        "  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse",
        "} from '@angular/common/http';",
        "",
        "import { Observable } from 'rxjs';",
        "import { tap, finalize } from 'rxjs/operators';",
        "",
        "/** Pass untouched request through to the next request handler. */",
        "@Injectable()",
        "export class LoggingInterceptor implements HttpInterceptor {",
        "",
        "    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
        "      const started = Date.now();",
        "      let ok: string;",
        "  ",
        "      // extend server response observable with logging",
        "      return next.handle(req)",
        "        .pipe(",
        "          tap(",
        "            // Succeeds when there is a response; ignore other events",
        "            event => ok = event instanceof HttpResponse ? 'succeeded' : '',",
        "            // Operation failed; error is an HttpErrorResponse",
        "            error => ok = 'failed'",
        "          ),",
        "          // Log when response observable either completes or errors",
        "          finalize(() => {",
        "            const elapsed = Date.now() - started;",
        "            const msg = `${req.method} \"${req.urlWithParams}\"",
        "               ${ok} in ${elapsed} ms.`;",
        "            console.log(msg);",
        "          })",
        "        );",
        "      }",
        "}",
        ""
      ],
      "description": "Angular http interceptor add logging header"
    },


    "Angular App Module Routes": {
      "prefix": "ang-router-appmodule",
      "description": "Routes to include in root module",
      "types": "typescript",
      "body": [
        "import { NgModule } from '@angular/core';",
        "import { RouterModule, Routes } from '@angular/router';",
        "",
        "const routes: Routes = [",
        "\t{ path: '', component: ${Home}Component },",
        "\t{ path: '${path}', component: ${Feature}Component },",
        "\t{ path: '**', component: PageNotFoundComponent },",
        "];",
        "",
        "@NgModule({",
        "\timports: [RouterModule.forRoot(routes)],",
        "\texports: [RouterModule]",
        "})",
        "export class AppRoutingModule {}",
        "$0"
      ]
    },
    "Angular Feature Module Routes": {
      "prefix": "ang-router-featuremodule",
      "description": "Routes to include in a feature module",
      "types": "typescript",
      "body": [
        "import { NgModule } from '@angular/core';",
        "import { RouterModule, Routes } from '@angular/router';",
        "import { CommonModule } from '@angular/common';",
        "",
        "const routes: Routes = [",
        "\t{ path: '${path}', component: ${Feature}Component }",
        "];",
        "",
        "@NgModule({",
        "\timports: [CommonModule, RouterModule.forChild(routes)],",
        "\texports: [RouterModule]",
        "})",
        "export class ${Feature}RoutingModule {}",
        "$0"
      ]
    },
    "Angular canDeactivate guard": {
      "prefix": "ang-candeactivate-guard",
      "body": [
        "import { Injectable }    from '@angular/core';",
        "import { CanDeactivate } from '@angular/router';",
        "import { Observable }    from 'rxjs';",
        "",
        "export interface CanComponentDeactivate {",
        " canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;",
        "}",
        "",
        "@Injectable({",
        "  providedIn: 'root',",
        "})",
        "export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
        "  canDeactivate(component: CanComponentDeactivate) {",
        "    return component.canDeactivate ? component.canDeactivate() : true;",
        "  }",
        "}"
      ],
      "description": "Angular canDeactivate guard"
    }
  }