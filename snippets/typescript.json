{
    "Angular Component With NG_VALUE_ACCESSOR": {
      "prefix": "ang-component-value-accessor",
      "description": "Angular Component With NG_VALUE_ACCESSOR",
      "body": [
        "import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';",
        "import { Component, Input, OnInit, forwardRef } from '@angular/core';",
        "",
        "export const ${1:COMPONENT_NAME}_VALUE_ACCESSOR: any = {",
        "\tprovide: NG_VALUE_ACCESSOR,",
        "\tuseExisting: forwardRef(() => ${2:ComponentName}Component),",
        "\tmulti: true",
        "};",
        "",
        "@Component({",
        "\tselector: '${3:selector-name}',",
        "\ttemplateUrl: './${4:name}.component.html',",
        "\tstyleUrls: ['./${4:name}.component.css'],",
        "\tproviders: [${1:COMPONENT_NAME}_VALUE_ACCESSOR]",
        "})",
        "export class ${2:ComponentName}Component implements OnInit, ControlValueAccessor {",
        "",
        "\tprivate _value: any;",
        "",
        "\tset value(value: any) {",
        "\t\tthis._value = value;",
        "\t\tthis.notifyValueChange();",
        "\t}",
        "",
        "\tget value(): any {",
        "\t\treturn this._value;",
        "\t}",
        "",
        "\tonChange: (value) => {};",
        "\tonTouched: () => {};",
        "",
        "\tconstructor() { }",
        "",
        "\tnotifyValueChange(): void {",
        "\t\tif (this.onChange) {",
        "\t\t\tthis.onChange(this.value);",
        "\t\t}",
        "\t}",
        "",
        "\tngOnInit(): void {",
        "\t\t",
        "\t}",
        "",
        "\twriteValue(obj: any): void {",
        "\t\tthis._value = obj;",
        "\t}",
        "",
        "\tregisterOnChange(fn: any): void {",
        "\t\tthis.onChange = fn;",
        "\t}",
        "",
        "\tregisterOnTouched(fn: any): void {",
        "\t\tthis.onTouched = fn;",
        "\t}",
        "",
        "\tsetDisabledState(isDisabled: boolean): void {",
        "\t}",
        "}",
        "$0"
      ]
    },
    // forms start
    "Angular reactive form validator function": {
      "prefix": "ang-reactive-form-validator",
      "body": [
        "import { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';",
        "",
        "export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {",
        "  return (control: AbstractControl): {[key: string]: any} | null => {",
        "    const forbidden = nameRe.test(control.value);",
        "    return forbidden ? {'forbiddenName': {value: control.value}} : null;",
        "  };",
        "}",
        ""
      ],
      "description": "reactive form validator function"
    },
    "Angular add validator function to reactive form": {
      "prefix": "ang-add-validator-function-to-reactive-form",
      "body": [
        "// Adding to reactive forms",
        "this.heroForm = new FormGroup({",
        "  name: new FormControl(this.hero.name, [",
        "    Validators.required,",
        "    Validators.minLength(4),",
        "    forbiddenNameValidator(/bob/i) // <-- Here's how you pass in the custom validator.",
        "  ]),",
        "  alterEgo: new FormControl(this.hero.alterEgo),",
        "  power: new FormControl(this.hero.power, Validators.required)",
        "});",
        ""
      ],
      "description": "add validator function to reactive form"
    },
    "Angular add validator function to template driven form": {
      "prefix": "ang-add-validator-function-to-template-driven-form",
      "body": [
        "// Adding to template driven form",
        "@Directive({",
        "  selector: '[appForbiddenName]',",
        "  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]",
        "})",
        "export class ForbiddenValidatorDirective implements Validator {",
        "  @Input('appForbiddenName') forbiddenName: string;",
        "",
        "  validate(control: AbstractControl): {[key: string]: any} | null {",
        "    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)",
        "                              : null;",
        "  }",
        "}"
      ],
      "description": "add validator function to template driven form"
    },
    "Angular add form builder": {
      "prefix": "ang-add-form-builder",
      "body": [
        "import { FormArray, FormBuilder, Validators } from '@angular/forms';",
        "",
        "profileForm = this.fb.group({",
        "    firstName: ['kar', { updateOn: 'blur' }, [Validators.minLength(3), Validators.required]],",
        "    lastName: [''],",
        "    address: this.fb.group({",
        "        street: [''],",
        "        city: [''],",
        "        state: [''],",
        "        zip: ['']",
        "    }),",
        "    aliases: this.fb.array([",
        "        this.fb.control('')",
        "    ])",
        "});",
        "",
        "get aliases() {",
        "    return this.profileForm.get('aliases') as FormArray;",
        "}",
        "",
        "addAlias() {",
        "    this.aliases.push(this.fb.control(''));",
        "}"
      ],
      "description": "add form builder"
    }
    // forms end
  }